{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"codeExamples":{"edges":[{"node":{"id":"a-simple-component","code":"class HelloMessage extends React.Component {\n  render() {\n<<<<<<< HEAD\n    return (\n      <div>\n        שלום {this.props.name}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name=\"יהונתן\" />,\n  document.getElementById('hello-example')\n);\n=======\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n\nroot.render(<HelloMessage name=\"Taylor\" />);\n>>>>>>> 84ad3308338e2bb819f4f24fa8e9dfeeffaa970b\n","mdAbsolutePath":"/Users/hannanel/Documents/hannanel/he.reactjs.org/content/home/examples/a-simple-component.md"}},{"node":{"id":"a-component-using-external-plugins","code":"class MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.md = new Remarkable();\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { value: 'שלום, **עולם**!' };\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  getRawMarkup() {\n    return { __html: this.md.render(this.state.value) };\n  }\n\n  render() {\n    return (\n      <div className=\"MarkdownEditor\" dir='rtl'>\n        <h3>קלט</h3>\n        <label htmlFor=\"markdown-content\">\n          הקלד איזשהו markdown\n        </label>\n        <textarea\n          id=\"markdown-content\"\n          onChange={this.handleChange}\n          defaultValue={this.state.value}\n        />\n        <h3>פלט</h3>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        />\n      </div>\n    );\n  }\n}\n\nroot.render(<MarkdownEditor />);\n","mdAbsolutePath":"/Users/hannanel/Documents/hannanel/he.reactjs.org/content/home/examples/a-component-using-external-plugins.md"}},{"node":{"id":"a-stateful-component","code":"class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div dir='rtl'>\n        שניות: {this.state.seconds}\n      </div>\n    );\n  }\n}\n\nroot.render(<Timer />);\n","mdAbsolutePath":"/Users/hannanel/Documents/hannanel/he.reactjs.org/content/home/examples/a-stateful-component.md"}},{"node":{"id":"an-application","code":"class TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div dir='rtl'>\n        <h3>משימות</h3>\n        <TodoList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            רשימת המשימות\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>\n            הוסף #{this.state.items.length + 1}\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.text.length === 0) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nroot.render(<TodoApp />);\n","mdAbsolutePath":"/Users/hannanel/Documents/hannanel/he.reactjs.org/content/home/examples/an-application.md"}}]},"examples":{"edges":[{"node":{"fileAbsolutePath":"/Users/hannanel/Documents/hannanel/he.reactjs.org/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"קומפוננטה פשוטה","domid":"hello-example"},"html":"<p>קומפוננטות ריאקטיות מממשות מתודת <code class=\"gatsby-code-text\">render()</code> הלוקחת קלט מידע ומחזירה מה להציג. הדוגמא הזאת משתמשת בתחביר הדומה לXML ונקרא JSX. קלט מידע המועבר לקומפוננטה יהיה נגיש ל<code class=\"gatsby-code-text\">render()</code> באמצעות <code class=\"gatsby-code-text\">this.props</code>.</p>\n<p><strong>JSX הוא אופציונלי ולא חובה כדי להשתמש ב React.</strong> נסה את <a href=\"https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA\" target=\"_blank\" rel=\"noreferrer\">Babel REPL</a> כדי לראות את הקוד JavaScript הגולמי שמיוצר על ידי שלב הקומפילציה של JSX.</p>"}},{"node":{"fileAbsolutePath":"/Users/hannanel/Documents/hannanel/he.reactjs.org/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"קומפוננטה עם state","domid":"timer-example"},"html":"<p>בנוסף ללקיחת מידע קלט (הנגיש באמצעות <code class=\"gatsby-code-text\">this.props</code>), קומפוננטה יכולה לשמור מידע על state פנימי (הנגיש באמצעות <code class=\"gatsby-code-text\">this.state</code>). כאשר הstate של הקומפוננטה משתנה, הmarkup המעובד יעודכן על ידי קריאה מחדש ל <code class=\"gatsby-code-text\">render()</code>.</p>"}},{"node":{"fileAbsolutePath":"/Users/hannanel/Documents/hannanel/he.reactjs.org/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"אפליקציה","domid":"todos-example"},"html":"<p>עם שימוש ב<code class=\"gatsby-code-text\">props</code>ו-<code class=\"gatsby-code-text\">state</code>, אנחנו יכולים ליצור אפליקצית צ’קליסט קטנה. הדוגמא הזאת משתמשת ב<code class=\"gatsby-code-text\">state</code> כדי לעקוב אחרי רשימה של פריטים והטקסט שהמשתמש הכניס. למרות שהטיפול באירועים נראה מעובד באותה שורה. הם יאספו וימומשו באמצעות event delegation.</p>"}},{"node":{"fileAbsolutePath":"/Users/hannanel/Documents/hannanel/he.reactjs.org/content/home/examples/a-component-using-external-plugins.md","fields":{"slug":"/home/examples/a-component-using-external-plugins.html"},"frontmatter":{"title":"קומפוננטה המשתמשת בתוספים חיצוניים","domid":"markdown-example"},"html":"<p>React מאפשרת לך להתממשק עם ספריות ופריימוורקים אחרים. הדוגמא הזאת משתמשת ב<strong>remarkable</strong>, ספריה חיצונית של Markdown, הממירה את הערך של ה<code class=\"gatsby-code-text\">textarea</code> בזמן אמת.</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"הצהרתי"},"html":"<p>React הופכת את היצירה של ממשקי משתמש אינטראקטיביים לנוחה יותר. עצב תצוגה פשוטה לכל state באפליקציה שלך, ו-React תעדכן ותרנדר בצורה יעילה רק את הקומפוננטות הנכונות כאשר הנתונים שלך משתנים.</p>\n<p>תצוגה הצהרתית הופכת את הקוד שלך ליותר צפוי וקל לדיבוג</p>"}},{"node":{"frontmatter":{"title":"מבוסס קומפוננטות"},"html":"<p>בנה קומפונטות מוכמסות המנהלות את הstate .שלהן ולאחר מכן הרכב אותן יחד לבניית ממשקי משתמש מורכבים</p>\n<p>כיוון שהלוגיקה של הקומפוננטות כתובה ב-JavaScript במקום בטמפלטים, אתה יכול להעביר מידע עשיר דרך האפליקציה ולהשאיר את הstate מחוץ לDOM.</p>"}},{"node":{"frontmatter":{"title":"למד פעם אחת, כתוב בכל מקום"},"html":"<p>אנו לא עושים הנחות על שאר הטכנולוגיות הנמצאות בשימוש באפליקצייה שלך, כך שאתה יכול לפתח פיצ’רים חדשים ב-React מבלי לשכתב קוד קיים.</p>\n<p>React יכולה גם להתרנדר בצד-שרת באמצעות Node ולתפעל אפליקציות מובייל באמצעות <a href=\"https://reactnative.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Native</a>.</p>"}}]}},"pageContext":{}},"staticQueryHashes":[]}