{"expireTime":9007200917365140000,"key":"transformer-remark-markdown-html-ast-ef8e90e00d3fbb016be1b6fac7ba1ca1-gatsby-remark-responsive-iframegatsby-remark-imagesgatsby-remark-external-linksgatsby-remark-header-custom-idsgatsby-remark-code-replsgatsby-remark-embed-snippetgatsby-remark-use-jsxgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React provides a declarative API so that you don’t have to worry about exactly what changes on every update. This makes writing applications a lot easier, but it might not be obvious how this is implemented within React. This article explains the choices we made in React’s “diffing” algorithm so that component updates are predictable while being fast enough for high-performance apps.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":387,"offset":387}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":387,"offset":387}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"motivation"},"children":[{"type":"element","tagName":"a","properties":{"href":"#motivation","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Motivation ","position":{"start":{"line":4,"column":4,"offset":392},"end":{"line":4,"column":28,"offset":416}}}],"position":{"start":{"line":4,"column":1,"offset":389},"end":{"line":4,"column":28,"offset":416}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When you use React, at a single point in time you can think of the ","position":{"start":{"line":6,"column":1,"offset":418},"end":{"line":6,"column":68,"offset":485}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">render()</code>","position":{"start":{"line":6,"column":68,"offset":485},"end":{"line":6,"column":78,"offset":495}}},{"type":"text","value":" function as creating a tree of React elements. On the next state or props update, that ","position":{"start":{"line":6,"column":78,"offset":495},"end":{"line":6,"column":166,"offset":583}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">render()</code>","position":{"start":{"line":6,"column":166,"offset":583},"end":{"line":6,"column":176,"offset":593}}},{"type":"text","value":" function will return a different tree of React elements. React then needs to figure out how to efficiently update the UI to match the most recent tree.","position":{"start":{"line":6,"column":176,"offset":593},"end":{"line":6,"column":328,"offset":745}}}],"position":{"start":{"line":6,"column":1,"offset":418},"end":{"line":6,"column":328,"offset":745}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are some generic solutions to this algorithmic problem of generating the minimum number of operations to transform one tree into another. However, the ","position":{"start":{"line":8,"column":1,"offset":747},"end":{"line":8,"column":158,"offset":904}}},{"type":"element","tagName":"a","properties":{"href":"https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"state of the art algorithms","position":{"start":{"line":8,"column":159,"offset":905},"end":{"line":8,"column":186,"offset":932}}}],"position":{"start":{"line":8,"column":158,"offset":904},"end":{"line":8,"column":259,"offset":1005}}},{"type":"text","value":" have a complexity in the order of O(n","position":{"start":{"line":8,"column":259,"offset":1005},"end":{"line":8,"column":297,"offset":1043}}},{"type":"raw","value":"<sup>","position":{"start":{"line":8,"column":297,"offset":1043},"end":{"line":8,"column":302,"offset":1048}}},{"type":"text","value":"3","position":{"start":{"line":8,"column":302,"offset":1048},"end":{"line":8,"column":303,"offset":1049}}},{"type":"raw","value":"</sup>","position":{"start":{"line":8,"column":303,"offset":1049},"end":{"line":8,"column":309,"offset":1055}}},{"type":"text","value":") where n is the number of elements in the tree.","position":{"start":{"line":8,"column":309,"offset":1055},"end":{"line":8,"column":357,"offset":1103}}}],"position":{"start":{"line":8,"column":1,"offset":747},"end":{"line":8,"column":357,"offset":1103}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we used this in React, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:","position":{"start":{"line":10,"column":1,"offset":1105},"end":{"line":10,"column":212,"offset":1316}}}],"position":{"start":{"line":10,"column":1,"offset":1105},"end":{"line":10,"column":212,"offset":1316}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Two elements of different types will produce different trees.","position":{"start":{"line":12,"column":4,"offset":1321},"end":{"line":12,"column":65,"offset":1382}}}],"position":{"start":{"line":12,"column":1,"offset":1318},"end":{"line":12,"column":65,"offset":1382}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The developer can hint at which child elements may be stable across different renders with a ","position":{"start":{"line":13,"column":4,"offset":1386},"end":{"line":13,"column":97,"offset":1479}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">key</code>","position":{"start":{"line":13,"column":97,"offset":1479},"end":{"line":13,"column":102,"offset":1484}}},{"type":"text","value":" prop.","position":{"start":{"line":13,"column":102,"offset":1484},"end":{"line":13,"column":108,"offset":1490}}}],"position":{"start":{"line":13,"column":1,"offset":1383},"end":{"line":13,"column":108,"offset":1490}}},{"type":"text","value":"\n"}],"position":{"start":{"line":12,"column":1,"offset":1318},"end":{"line":13,"column":108,"offset":1490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In practice, these assumptions are valid for almost all practical use cases.","position":{"start":{"line":15,"column":1,"offset":1492},"end":{"line":15,"column":77,"offset":1568}}}],"position":{"start":{"line":15,"column":1,"offset":1492},"end":{"line":15,"column":77,"offset":1568}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"the-diffing-algorithm"},"children":[{"type":"element","tagName":"a","properties":{"href":"#the-diffing-algorithm","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"The Diffing Algorithm ","position":{"start":{"line":17,"column":4,"offset":1573},"end":{"line":17,"column":50,"offset":1619}}}],"position":{"start":{"line":17,"column":1,"offset":1570},"end":{"line":17,"column":50,"offset":1619}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements.","position":{"start":{"line":19,"column":1,"offset":1621},"end":{"line":19,"column":139,"offset":1759}}}],"position":{"start":{"line":19,"column":1,"offset":1621},"end":{"line":19,"column":139,"offset":1759}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"elements-of-different-types"},"children":[{"type":"element","tagName":"a","properties":{"href":"#elements-of-different-types","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Elements Of Different Types ","position":{"start":{"line":21,"column":5,"offset":1765},"end":{"line":21,"column":63,"offset":1823}}}],"position":{"start":{"line":21,"column":1,"offset":1761},"end":{"line":21,"column":63,"offset":1823}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. Going from ","position":{"start":{"line":23,"column":1,"offset":1825},"end":{"line":23,"column":132,"offset":1956}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;a></code>","position":{"start":{"line":23,"column":132,"offset":1956},"end":{"line":23,"column":137,"offset":1961}}},{"type":"text","value":" to ","position":{"start":{"line":23,"column":137,"offset":1961},"end":{"line":23,"column":141,"offset":1965}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;img></code>","position":{"start":{"line":23,"column":141,"offset":1965},"end":{"line":23,"column":148,"offset":1972}}},{"type":"text","value":", or from ","position":{"start":{"line":23,"column":148,"offset":1972},"end":{"line":23,"column":158,"offset":1982}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;Article></code>","position":{"start":{"line":23,"column":158,"offset":1982},"end":{"line":23,"column":169,"offset":1993}}},{"type":"text","value":" to ","position":{"start":{"line":23,"column":169,"offset":1993},"end":{"line":23,"column":173,"offset":1997}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;Comment></code>","position":{"start":{"line":23,"column":173,"offset":1997},"end":{"line":23,"column":184,"offset":2008}}},{"type":"text","value":", or from ","position":{"start":{"line":23,"column":184,"offset":2008},"end":{"line":23,"column":194,"offset":2018}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;Button></code>","position":{"start":{"line":23,"column":194,"offset":2018},"end":{"line":23,"column":204,"offset":2028}}},{"type":"text","value":" to ","position":{"start":{"line":23,"column":204,"offset":2028},"end":{"line":23,"column":208,"offset":2032}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;div></code>","position":{"start":{"line":23,"column":208,"offset":2032},"end":{"line":23,"column":215,"offset":2039}}},{"type":"text","value":" - any of those will lead to a full rebuild.","position":{"start":{"line":23,"column":215,"offset":2039},"end":{"line":23,"column":259,"offset":2083}}}],"position":{"start":{"line":23,"column":1,"offset":1825},"end":{"line":23,"column":259,"offset":2083}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When tearing down a tree, old DOM nodes are destroyed. Component instances receive ","position":{"start":{"line":25,"column":1,"offset":2085},"end":{"line":25,"column":84,"offset":2168}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">componentWillUnmount()</code>","position":{"start":{"line":25,"column":84,"offset":2168},"end":{"line":25,"column":108,"offset":2192}}},{"type":"text","value":". When building up a new tree, new DOM nodes are inserted into the DOM. Component instances receive ","position":{"start":{"line":25,"column":108,"offset":2192},"end":{"line":25,"column":208,"offset":2292}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">UNSAFE_componentWillMount()</code>","position":{"start":{"line":25,"column":208,"offset":2292},"end":{"line":25,"column":237,"offset":2321}}},{"type":"text","value":" and then ","position":{"start":{"line":25,"column":237,"offset":2321},"end":{"line":25,"column":247,"offset":2331}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">componentDidMount()</code>","position":{"start":{"line":25,"column":247,"offset":2331},"end":{"line":25,"column":268,"offset":2352}}},{"type":"text","value":". Any state associated with the old tree is lost.","position":{"start":{"line":25,"column":268,"offset":2352},"end":{"line":25,"column":317,"offset":2401}}}],"position":{"start":{"line":25,"column":1,"offset":2085},"end":{"line":25,"column":317,"offset":2401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Any components below the root will also get unmounted and have their state destroyed. For example, when diffing:","position":{"start":{"line":27,"column":1,"offset":2403},"end":{"line":27,"column":113,"offset":2515}}}],"position":{"start":{"line":27,"column":1,"offset":2403},"end":{"line":27,"column":113,"offset":2515}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>","position":{"start":{"line":29,"column":1,"offset":2517},"end":{"line":37,"column":4,"offset":2584}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This will destroy the old ","position":{"start":{"line":39,"column":1,"offset":2586},"end":{"line":39,"column":27,"offset":2612}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">Counter</code>","position":{"start":{"line":39,"column":27,"offset":2612},"end":{"line":39,"column":36,"offset":2621}}},{"type":"text","value":" and remount a new one.","position":{"start":{"line":39,"column":36,"offset":2621},"end":{"line":39,"column":59,"offset":2644}}}],"position":{"start":{"line":39,"column":1,"offset":2586},"end":{"line":39,"column":59,"offset":2644}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":41,"column":2,"offset":2647},"end":{"line":41,"column":7,"offset":2652}}}],"position":{"start":{"line":41,"column":2,"offset":2647},"end":{"line":41,"column":7,"offset":2652}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"These methods are considered legacy and you should ","position":{"start":{"line":43,"column":2,"offset":2656},"end":{"line":43,"column":53,"offset":2707}}},{"type":"element","tagName":"a","properties":{"href":"/blog/2018/03/27/update-on-async-rendering.html"},"children":[{"type":"text","value":"avoid them","position":{"start":{"line":43,"column":54,"offset":2708},"end":{"line":43,"column":64,"offset":2718}}}],"position":{"start":{"line":43,"column":53,"offset":2707},"end":{"line":43,"column":114,"offset":2768}}},{"type":"text","value":" in new code:","position":{"start":{"line":43,"column":114,"offset":2768},"end":{"line":43,"column":127,"offset":2781}}}],"position":{"start":{"line":43,"column":2,"offset":2656},"end":{"line":43,"column":127,"offset":2781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"gatsby-code-text\">UNSAFE_componentWillMount()</code>","position":{"start":{"line":45,"column":4,"offset":2787},"end":{"line":45,"column":33,"offset":2816}}}],"position":{"start":{"line":45,"column":2,"offset":2785},"end":{"line":45,"column":33,"offset":2816}}},{"type":"text","value":"\n"}],"position":{"start":{"line":45,"column":2,"offset":2785},"end":{"line":45,"column":33,"offset":2816}}},{"type":"text","value":"\n"}],"position":{"start":{"line":41,"column":1,"offset":2646},"end":{"line":45,"column":33,"offset":2816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"dom-elements-of-the-same-type"},"children":[{"type":"element","tagName":"a","properties":{"href":"#dom-elements-of-the-same-type","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"DOM Elements Of The Same Type ","position":{"start":{"line":47,"column":5,"offset":2822},"end":{"line":47,"column":67,"offset":2884}}}],"position":{"start":{"line":47,"column":1,"offset":2818},"end":{"line":47,"column":67,"offset":2884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. For example:","position":{"start":{"line":49,"column":1,"offset":2886},"end":{"line":49,"column":185,"offset":3070}}}],"position":{"start":{"line":49,"column":1,"offset":2886},"end":{"line":49,"column":185,"offset":3070}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>before<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>after<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>","position":{"start":{"line":51,"column":1,"offset":3072},"end":{"line":55,"column":4,"offset":3164}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By comparing these two elements, React knows to only modify the ","position":{"start":{"line":57,"column":1,"offset":3166},"end":{"line":57,"column":65,"offset":3230}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">className</code>","position":{"start":{"line":57,"column":65,"offset":3230},"end":{"line":57,"column":76,"offset":3241}}},{"type":"text","value":" on the underlying DOM node.","position":{"start":{"line":57,"column":76,"offset":3241},"end":{"line":57,"column":104,"offset":3269}}}],"position":{"start":{"line":57,"column":1,"offset":3166},"end":{"line":57,"column":104,"offset":3269}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When updating ","position":{"start":{"line":59,"column":1,"offset":3271},"end":{"line":59,"column":15,"offset":3285}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">style</code>","position":{"start":{"line":59,"column":15,"offset":3285},"end":{"line":59,"column":22,"offset":3292}}},{"type":"text","value":", React also knows to update only the properties that changed. For example:","position":{"start":{"line":59,"column":22,"offset":3292},"end":{"line":59,"column":97,"offset":3367}}}],"position":{"start":{"line":59,"column":1,"offset":3271},"end":{"line":59,"column":97,"offset":3367}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{color:</span> <span class=\"token attr-name\">'red',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{color:</span> <span class=\"token attr-name\">'green',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/></span></span></code></pre></div>","position":{"start":{"line":61,"column":1,"offset":3369},"end":{"line":65,"column":4,"offset":3484}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When converting between these two elements, React knows to only modify the ","position":{"start":{"line":67,"column":1,"offset":3486},"end":{"line":67,"column":76,"offset":3561}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">color</code>","position":{"start":{"line":67,"column":76,"offset":3561},"end":{"line":67,"column":83,"offset":3568}}},{"type":"text","value":" style, not the ","position":{"start":{"line":67,"column":83,"offset":3568},"end":{"line":67,"column":99,"offset":3584}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">fontWeight</code>","position":{"start":{"line":67,"column":99,"offset":3584},"end":{"line":67,"column":111,"offset":3596}}},{"type":"text","value":".","position":{"start":{"line":67,"column":111,"offset":3596},"end":{"line":67,"column":112,"offset":3597}}}],"position":{"start":{"line":67,"column":1,"offset":3486},"end":{"line":67,"column":112,"offset":3597}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After handling the DOM node, React then recurses on the children.","position":{"start":{"line":69,"column":1,"offset":3599},"end":{"line":69,"column":66,"offset":3664}}}],"position":{"start":{"line":69,"column":1,"offset":3599},"end":{"line":69,"column":66,"offset":3664}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"component-elements-of-the-same-type"},"children":[{"type":"element","tagName":"a","properties":{"href":"#component-elements-of-the-same-type","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Component Elements Of The Same Type ","position":{"start":{"line":71,"column":5,"offset":3670},"end":{"line":71,"column":79,"offset":3744}}}],"position":{"start":{"line":71,"column":1,"offset":3666},"end":{"line":71,"column":79,"offset":3744}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls ","position":{"start":{"line":73,"column":1,"offset":3746},"end":{"line":73,"column":197,"offset":3942}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">UNSAFE_componentWillReceiveProps()</code>","position":{"start":{"line":73,"column":197,"offset":3942},"end":{"line":73,"column":233,"offset":3978}}},{"type":"text","value":", ","position":{"start":{"line":73,"column":233,"offset":3978},"end":{"line":73,"column":235,"offset":3980}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">UNSAFE_componentWillUpdate()</code>","position":{"start":{"line":73,"column":235,"offset":3980},"end":{"line":73,"column":265,"offset":4010}}},{"type":"text","value":" and ","position":{"start":{"line":73,"column":265,"offset":4010},"end":{"line":73,"column":270,"offset":4015}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">componentDidUpdate()</code>","position":{"start":{"line":73,"column":270,"offset":4015},"end":{"line":73,"column":292,"offset":4037}}},{"type":"text","value":" on the underlying instance.","position":{"start":{"line":73,"column":292,"offset":4037},"end":{"line":73,"column":320,"offset":4065}}}],"position":{"start":{"line":73,"column":1,"offset":3746},"end":{"line":73,"column":320,"offset":4065}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next, the ","position":{"start":{"line":75,"column":1,"offset":4067},"end":{"line":75,"column":11,"offset":4077}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">render()</code>","position":{"start":{"line":75,"column":11,"offset":4077},"end":{"line":75,"column":21,"offset":4087}}},{"type":"text","value":" method is called and the diff algorithm recurses on the previous result and the new result.","position":{"start":{"line":75,"column":21,"offset":4087},"end":{"line":75,"column":113,"offset":4179}}}],"position":{"start":{"line":75,"column":1,"offset":4067},"end":{"line":75,"column":113,"offset":4179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":77,"column":2,"offset":4182},"end":{"line":77,"column":7,"offset":4187}}}],"position":{"start":{"line":77,"column":2,"offset":4182},"end":{"line":77,"column":7,"offset":4187}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"These methods are considered legacy and you should ","position":{"start":{"line":79,"column":2,"offset":4191},"end":{"line":79,"column":53,"offset":4242}}},{"type":"element","tagName":"a","properties":{"href":"/blog/2018/03/27/update-on-async-rendering.html"},"children":[{"type":"text","value":"avoid them","position":{"start":{"line":79,"column":54,"offset":4243},"end":{"line":79,"column":64,"offset":4253}}}],"position":{"start":{"line":79,"column":53,"offset":4242},"end":{"line":79,"column":114,"offset":4303}}},{"type":"text","value":" in new code:","position":{"start":{"line":79,"column":114,"offset":4303},"end":{"line":79,"column":127,"offset":4316}}}],"position":{"start":{"line":79,"column":2,"offset":4191},"end":{"line":79,"column":127,"offset":4316}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"gatsby-code-text\">UNSAFE_componentWillUpdate()</code>","position":{"start":{"line":81,"column":4,"offset":4322},"end":{"line":81,"column":34,"offset":4352}}}],"position":{"start":{"line":81,"column":2,"offset":4320},"end":{"line":81,"column":34,"offset":4352}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"gatsby-code-text\">UNSAFE_componentWillReceiveProps()</code>","position":{"start":{"line":82,"column":4,"offset":4356},"end":{"line":82,"column":40,"offset":4392}}}],"position":{"start":{"line":82,"column":2,"offset":4354},"end":{"line":82,"column":40,"offset":4392}}},{"type":"text","value":"\n"}],"position":{"start":{"line":81,"column":2,"offset":4320},"end":{"line":82,"column":40,"offset":4392}}},{"type":"text","value":"\n"}],"position":{"start":{"line":77,"column":1,"offset":4181},"end":{"line":82,"column":40,"offset":4392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"recursing-on-children"},"children":[{"type":"element","tagName":"a","properties":{"href":"#recursing-on-children","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Recursing On Children ","position":{"start":{"line":84,"column":5,"offset":4398},"end":{"line":84,"column":51,"offset":4444}}}],"position":{"start":{"line":84,"column":1,"offset":4394},"end":{"line":84,"column":51,"offset":4444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By default, when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there’s a difference.","position":{"start":{"line":86,"column":1,"offset":4446},"end":{"line":86,"column":179,"offset":4624}}}],"position":{"start":{"line":86,"column":1,"offset":4446},"end":{"line":86,"column":179,"offset":4624}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example, when adding an element at the end of the children, converting between these two trees works well:","position":{"start":{"line":88,"column":1,"offset":4626},"end":{"line":88,"column":111,"offset":4736}}}],"position":{"start":{"line":88,"column":1,"offset":4626},"end":{"line":88,"column":111,"offset":4736}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>first<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>second<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>first<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>second<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>third<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>","position":{"start":{"line":90,"column":1,"offset":4738},"end":{"line":101,"column":4,"offset":4858}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React will match the two ","position":{"start":{"line":103,"column":1,"offset":4860},"end":{"line":103,"column":26,"offset":4885}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;li>first&lt;/li></code>","position":{"start":{"line":103,"column":26,"offset":4885},"end":{"line":103,"column":42,"offset":4901}}},{"type":"text","value":" trees, match the two ","position":{"start":{"line":103,"column":42,"offset":4901},"end":{"line":103,"column":64,"offset":4923}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;li>second&lt;/li></code>","position":{"start":{"line":103,"column":64,"offset":4923},"end":{"line":103,"column":81,"offset":4940}}},{"type":"text","value":" trees, and then insert the ","position":{"start":{"line":103,"column":81,"offset":4940},"end":{"line":103,"column":109,"offset":4968}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;li>third&lt;/li></code>","position":{"start":{"line":103,"column":109,"offset":4968},"end":{"line":103,"column":125,"offset":4984}}},{"type":"text","value":" tree.","position":{"start":{"line":103,"column":125,"offset":4984},"end":{"line":103,"column":131,"offset":4990}}}],"position":{"start":{"line":103,"column":1,"offset":4860},"end":{"line":103,"column":131,"offset":4990}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you implement it naively, inserting an element at the beginning has worse performance. For example, converting between these two trees works poorly:","position":{"start":{"line":105,"column":1,"offset":4992},"end":{"line":105,"column":152,"offset":5143}}}],"position":{"start":{"line":105,"column":1,"offset":4992},"end":{"line":105,"column":152,"offset":5143}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Connecticut<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>","position":{"start":{"line":107,"column":1,"offset":5145},"end":{"line":118,"column":4,"offset":5275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React will mutate every child instead of realizing it can keep the ","position":{"start":{"line":120,"column":1,"offset":5277},"end":{"line":120,"column":68,"offset":5344}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;li>Duke&lt;/li></code>","position":{"start":{"line":120,"column":68,"offset":5344},"end":{"line":120,"column":83,"offset":5359}}},{"type":"text","value":" and ","position":{"start":{"line":120,"column":83,"offset":5359},"end":{"line":120,"column":88,"offset":5364}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">&lt;li>Villanova&lt;/li></code>","position":{"start":{"line":120,"column":88,"offset":5364},"end":{"line":120,"column":108,"offset":5384}}},{"type":"text","value":" subtrees intact. This inefficiency can be a problem.","position":{"start":{"line":120,"column":108,"offset":5384},"end":{"line":120,"column":161,"offset":5437}}}],"position":{"start":{"line":120,"column":1,"offset":5277},"end":{"line":120,"column":161,"offset":5437}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"keys"},"children":[{"type":"element","tagName":"a","properties":{"href":"#keys","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Keys ","position":{"start":{"line":122,"column":5,"offset":5443},"end":{"line":122,"column":17,"offset":5455}}}],"position":{"start":{"line":122,"column":1,"offset":5439},"end":{"line":122,"column":17,"offset":5455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to solve this issue, React supports a ","position":{"start":{"line":124,"column":1,"offset":5457},"end":{"line":124,"column":48,"offset":5504}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">key</code>","position":{"start":{"line":124,"column":48,"offset":5504},"end":{"line":124,"column":53,"offset":5509}}},{"type":"text","value":" attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a ","position":{"start":{"line":124,"column":53,"offset":5509},"end":{"line":124,"column":208,"offset":5664}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">key</code>","position":{"start":{"line":124,"column":208,"offset":5664},"end":{"line":124,"column":213,"offset":5669}}},{"type":"text","value":" to our inefficient example above can make the tree conversion efficient:","position":{"start":{"line":124,"column":213,"offset":5669},"end":{"line":124,"column":286,"offset":5742}}}],"position":{"start":{"line":124,"column":1,"offset":5457},"end":{"line":124,"column":286,"offset":5742}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2014<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Connecticut<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>","position":{"start":{"line":126,"column":1,"offset":5744},"end":{"line":137,"column":4,"offset":5929}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now React knows that the element with key ","position":{"start":{"line":139,"column":1,"offset":5931},"end":{"line":139,"column":43,"offset":5973}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">'2014'</code>","position":{"start":{"line":139,"column":43,"offset":5973},"end":{"line":139,"column":51,"offset":5981}}},{"type":"text","value":" is the new one, and the elements with the keys ","position":{"start":{"line":139,"column":51,"offset":5981},"end":{"line":139,"column":99,"offset":6029}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">'2015'</code>","position":{"start":{"line":139,"column":99,"offset":6029},"end":{"line":139,"column":107,"offset":6037}}},{"type":"text","value":" and ","position":{"start":{"line":139,"column":107,"offset":6037},"end":{"line":139,"column":112,"offset":6042}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">'2016'</code>","position":{"start":{"line":139,"column":112,"offset":6042},"end":{"line":139,"column":120,"offset":6050}}},{"type":"text","value":" have just moved.","position":{"start":{"line":139,"column":120,"offset":6050},"end":{"line":139,"column":137,"offset":6067}}}],"position":{"start":{"line":139,"column":1,"offset":5931},"end":{"line":139,"column":137,"offset":6067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In practice, finding a key is usually not hard. The element you are going to display may already have a unique ID, so the key can just come from your data:","position":{"start":{"line":141,"column":1,"offset":6069},"end":{"line":141,"column":156,"offset":6224}}}],"position":{"start":{"line":141,"column":1,"offset":6069},"end":{"line":141,"column":156,"offset":6224}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>","position":{"start":{"line":143,"column":1,"offset":6226},"end":{"line":145,"column":4,"offset":6270}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When that’s not the case, you can add a new ID property to your model or hash some parts of the content to generate a key. The key only has to be unique among its siblings, not globally unique.","position":{"start":{"line":147,"column":1,"offset":6272},"end":{"line":147,"column":194,"offset":6465}}}],"position":{"start":{"line":147,"column":1,"offset":6272},"end":{"line":147,"column":194,"offset":6465}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last resort, you can pass an item’s index in the array as a key. This can work well if the items are never reordered, but reorders will be slow.","position":{"start":{"line":149,"column":1,"offset":6467},"end":{"line":149,"column":150,"offset":6616}}}],"position":{"start":{"line":149,"column":1,"offset":6467},"end":{"line":149,"column":150,"offset":6616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Reorders can also cause issues with component state when indexes are used as keys. Component instances are updated and reused based on their key. If the key is an index, moving an item changes it. As a result, component state for things like uncontrolled inputs can get mixed up and updated in unexpected ways.","position":{"start":{"line":151,"column":1,"offset":6618},"end":{"line":151,"column":311,"offset":6928}}}],"position":{"start":{"line":151,"column":1,"offset":6618},"end":{"line":151,"column":311,"offset":6928}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is ","position":{"start":{"line":153,"column":1,"offset":6930},"end":{"line":153,"column":9,"offset":6938}}},{"type":"raw","value":"<a href=\"/redirect-to-codepen/reconciliation/index-used-as-key\" target=\"_blank\" rel=\"noreferrer\">an example of the issues that can be caused by using indexes as keys</a>"},{"type":"text","value":" on CodePen, and here is ","position":{"start":{"line":153,"column":123,"offset":7052},"end":{"line":153,"column":148,"offset":7077}}},{"type":"raw","value":"<a href=\"/redirect-to-codepen/reconciliation/no-index-used-as-key\" target=\"_blank\" rel=\"noreferrer\">an updated version of the same example showing how not using indexes as keys will fix these reordering, sorting, and prepending issues</a>"},{"type":"text","value":".","position":{"start":{"line":153,"column":331,"offset":7260},"end":{"line":153,"column":332,"offset":7261}}}],"position":{"start":{"line":153,"column":1,"offset":6930},"end":{"line":153,"column":332,"offset":7261}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"tradeoffs"},"children":[{"type":"element","tagName":"a","properties":{"href":"#tradeoffs","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Tradeoffs ","position":{"start":{"line":155,"column":4,"offset":7266},"end":{"line":155,"column":26,"offset":7288}}}],"position":{"start":{"line":155,"column":1,"offset":7263},"end":{"line":155,"column":26,"offset":7288}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is important to remember that the reconciliation algorithm is an implementation detail. React could rerender the whole app on every action; the end result would be the same. Just to be clear, rerender in this context means calling ","position":{"start":{"line":157,"column":1,"offset":7290},"end":{"line":157,"column":235,"offset":7524}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">render</code>","position":{"start":{"line":157,"column":235,"offset":7524},"end":{"line":157,"column":243,"offset":7532}}},{"type":"text","value":" for all components, it doesn’t mean React will unmount and remount them. It will only apply the differences following the rules stated in the previous sections.","position":{"start":{"line":157,"column":243,"offset":7532},"end":{"line":157,"column":404,"offset":7693}}}],"position":{"start":{"line":157,"column":1,"offset":7290},"end":{"line":157,"column":404,"offset":7693}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We are regularly refining the heuristics in order to make common use cases faster. In the current implementation, you can express the fact that a subtree has been moved amongst its siblings, but you cannot tell that it has moved somewhere else. The algorithm will rerender that full subtree.","position":{"start":{"line":159,"column":1,"offset":7695},"end":{"line":159,"column":292,"offset":7986}}}],"position":{"start":{"line":159,"column":1,"offset":7695},"end":{"line":159,"column":292,"offset":7986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Because React relies on heuristics, if the assumptions behind them are not met, performance will suffer.","position":{"start":{"line":161,"column":1,"offset":7988},"end":{"line":161,"column":105,"offset":8092}}}],"position":{"start":{"line":161,"column":1,"offset":7988},"end":{"line":161,"column":105,"offset":8092}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The algorithm will not try to match subtrees of different component types. If you see yourself alternating between two component types with very similar output, you may want to make it the same type. In practice, we haven’t found this to be an issue.","position":{"start":{"line":163,"column":4,"offset":8097},"end":{"line":163,"column":254,"offset":8347}}}],"position":{"start":{"line":163,"column":1,"offset":8094},"end":{"line":164,"column":1,"offset":8348}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Keys should be stable, predictable, and unique. Unstable keys (like those produced by ","position":{"start":{"line":165,"column":4,"offset":8352},"end":{"line":165,"column":90,"offset":8438}}},{"type":"raw","value":"<code class=\"gatsby-code-text\">Math.random()</code>","position":{"start":{"line":165,"column":90,"offset":8438},"end":{"line":165,"column":105,"offset":8453}}},{"type":"text","value":") will cause many component instances and DOM nodes to be unnecessarily recreated, which can cause performance degradation and lost state in child components.","position":{"start":{"line":165,"column":105,"offset":8453},"end":{"line":165,"column":263,"offset":8611}}}],"position":{"start":{"line":165,"column":1,"offset":8349},"end":{"line":165,"column":263,"offset":8611}}},{"type":"text","value":"\n"}],"position":{"start":{"line":163,"column":1,"offset":8094},"end":{"line":165,"column":263,"offset":8611}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":166,"column":1,"offset":8612}}}}